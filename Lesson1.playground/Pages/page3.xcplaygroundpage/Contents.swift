//: [Previous](@previous)
/*:
 # 文字列と整数、ときどきコメント
 */
/*:
 2つのオブジェクト `moji` と `kazu` を宣言する。
 
 ````
 var moji = "1"
 var kazu = 1
 ````
 
 `moji` オブジェクトには `文字列` が
 `kazu` オブジェクトには `整数` が代入されている。
 */
var moji = "1"
var kazu = 1


/*:
 出力する
 `,` カンマ記号で区切ると、値を列挙できる
 
 ````
 print("文字...", moji)
 print("整数...", kazu)
 ````
 見たところ、結果に違いはなさそう
 */
print("文字...", moji)
print("整数...", kazu)


/*:
 `moji` オブジェクトの値を `"2"` に変更して、出力
 
 ````
 moji = "2"
 print(moji)
 ````
 プログラムは正しく動作した
 */
moji = "2"
print(moji)



/*:
 `kazu` オブジェクトの値を `"2"` に変更すると...
 
 ````
 kazu = "2"
 ````
 コンパイルできない（エラー）
 エラーの原因になったコードはコメントアウトしておくと、コンパイラから無視される。
 
 ````
 // kazu = "2"
 ````
 `//` より右側は、自由な記述ができる（コメント）
 */
// kazu = "2"
// 文字列 "2" は、kazu に代入できなかった


/*:
 `moji` には文字列の値、`kazu` には整数の値しか代入できない。
 オブジェクトは、`どんなタイプの値が扱えるか` が決まっているから。
 オブジェクトが扱えるデータのタイプを `データ型` という。
 */
//: [Next](@next)
