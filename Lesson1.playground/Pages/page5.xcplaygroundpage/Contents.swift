//: [Previous](@previous)
/*:
 # 型アノテーション
 */
/*:
 整数を扱うオブジェクト `one` を宣言して、 `1` を代入しておく。
 
 ````
 var one = 1
 ````
 */
var one: Double = 1



/*:
 値を小数点数 `0.1` に更新しようとすると...
 
 ````
 one = 0.1
 ````
 `one` は整数しか扱えない。
 エラーになるので、コメントアウトしておく
 */
one = 0.1
one = 0.123
one = 123



/*:
 ## 小数点数のデータ型
 小数点数を扱うオブジェクト `floatingNumber` を宣言して、`0.1` を代入する
 
 ````
 var floatingNumber = 0.1
 type(of:floatingNumber)
 ````
 `type(of:)` 機能を使って、データ型を調べると...
 `Double` 型になっている
 */
var floatingNumber = 0.1
type(of:floatingNumber)



/*:
 小数点数を扱うオブジェクトは `Double` 型
 整数オブジェクトとは異なる別のデータ型になる
 */
/*:
 型を明示すると、強制的にデータ型を指定できる
 `: Double` を追記して、変数 `one` を `Double` 型オブジェクトにする
 
 ````
 var one: Double = 1
 ````
 実行結果をインラインまたはクイックルックで表示してみると...
 値は `1.0` になっている。
 コメントアウトを解除しても、今度はエラーにならない

 ````
 one = 1.0
 ````
 他の小数点数でも値を更新できる
 
 ````
 one = 0.123
 one = 123
 ````
 追記した `: データ型` の部分を `型アノテーション（型の注釈）` という
 */
/*:
 型アノテーションがなくても、最初に代入した値によってオブジェクトのデータ型が決定する
 オブジェクトに代入した最初の値のことを `初期値` という。
 オブジェクトに初期値を代入することを `初期化` という。
 オブジェクトのデータ型を決定することを `宣言` といい、値を代入することを `定義` という。
 型アノテーションがなくても、初期化することでオブジェクトを宣言できる
 */
//: [Next](@next)
