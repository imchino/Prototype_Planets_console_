//: [Previous](@previous)
/*:
 # オプショナル、失敗するイニシャライザ
 */
/*:
 ### nil のデータ型
 `type(of:)` 機能を使って、値が `nil` になっているオブジェクトのデータ型を調べる
 失敗するイニシャライザを使って、`something` オブジェクトを生成する
 パラメータに文字列を指定すれば、`Int` 型イニシャライザは失敗する
 
 ````
 var something = Int("abc")
 type(of: something)
 ````
 `Optional<Int>` 型と表示される
 `オプショナル` は「別の可能性がある」という意味
 つまり、`Optional<Int>` は「整数じゃないかもしれない `Int` 型」のこと
 実際、`nil` は整数じゃない
 */
var something = Int("123")
type(of: something)


/*:
 別の文字列をパラメータに指定する
 例えば `"123"` という数字の文字列の場合...
 コードを修正する
 
 ````
 something = Int("123") // "abc" → "123"
 type(of: something)
 ````
 実行すると...
 整数 `123` のオブジェクトを生成できたけど、オプショナルな `Int` 型
 */
/*:
 `Int()` イニシャライザを実行した結果のオブジェクトは...
 数値データをパラメータにすると `Int` 型になる
 文字列データをパラメータにすると、失敗して `nil` になるかもしれないので `Optiona<Int>` 型になる
 オプショナルは `意図しない結果` によるエラーを回避する「エラー予防装置」の役割を果たす
 */
//: [Next](@next)
